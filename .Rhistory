dfout = dfout[1:subset_size]
}
#produce x and y, turn y to discrete
x <- t(assay(dfout))
if (var_count > 0){
gene_vars <- abs(apply(x, 2, var))
gene_vars <- sort(gene_vars, decreasing = TRUE)
gene_vars <- gene_vars[1:var_count]
x <- x[, names(gene_vars)]
}
y <- colData(dfout)$aac_recomputed
if (cutoff_method == "waterfall"){
cutoff <- callingWaterfall(y, "AUC")
} else {
cutoff <- 0.2
}
y2 <- ifelse(y >= cutoff,"sensitive","resistant")
#print class counts for y
counts <- table(y2)
print(sprintf("Resistant: %d", counts[1]))
print(sprintf("Sensitive: %d", counts[2]))
output <- list("X"=x, "Y" = list("class"=y2, "aac" = y))
return(output)
}
#second function trains model based on x and y
trainmodel <- function(x,y,name,type, method, ft = -100, var_count = -100){
set.seed(1)
if(method == "glmnet"){
tgrid <- expand.grid(alpha=seq(0, 1, 0.2),
lambda=seq(0, 10, 1))
}
else if (method == "rf"){
tgrid <- expand.grid(.mtry = seq(10,100,10))
}
if (type == "class"){
tcontrol <- trainControl(method="repeatedcv",
number= 4,
repeats = 4,
search="grid",
savePredictions ="all",
allowParallel = TRUE,
verboseIter=FALSE,
classProbs = TRUE,
sampling = "up")
y <- y$class
}
else if (type == "regression"){
tcontrol <- trainControl(method="repeatedcv",
number= 4,
repeats = 4,
search="grid",
savePredictions ="all",
allowParallel = TRUE,
verboseIter=FALSE)
y <- y$aac
}
trainIndex <- createDataPartition(y, p = .8,
list = TRUE,
times = 25)
pred_sample <- data.frame()
per <- list()
modRes <- list()
output <- list()
for(res in names(trainIndex))
{
trIndx <- trainIndex[[res]]
tsIndx <- setdiff(1:nrow(x), trIndx)
preProcValues <- preProcess(x[trIndx, ], method = c("center", "scale"))
trainTransformed <- predict(preProcValues, x[trIndx, ])
testTransformed <- predict(preProcValues, x[tsIndx, ])
if (type == "class"){
train_result_sample <- train(x=trainTransformed, y=y[trIndx],
method=sprintf("%s", method),
maximize = TRUE,
tuneGrid=tgrid,
trControl=tcontrol)
train_result_sample$trainingData <- NULL
predictedRes  <- predict(train_result_sample, testTransformed, type = c("raw"))
predictedResProb  <- predict(train_result_sample, testTransformed, type = c("prob"))
pred_sample_n <- data.frame(index = tsIndx,
predict.class=predictedRes,
predict.prob=predictedResProb,
obs=y[tsIndx],
resample=res)
per <- confusionMatrix(data = as.factor(pred_sample_n$predict.class), reference = as.factor(pred_sample_n$obs))
pred_sample <- rbind(pred_sample, pred_sample_n)
metadata <- list("samples" = nrow(x), "features" = ncol(x), "label" = table(y))
modRes[[res]] <- list("model"=train_result_sample, "preprocess" = preProcValues)
output[[res]] <- list("prediction" = pred_sample, "stats" = per, "metadata" = metadata)
} else if (type  == "regression"){
if (ft > 0){
featcor <- abs(apply(trainTransformed, 2, function(i) cor(i,y[trIndx])))
featcor <- sort(featcor, decreasing = TRUE)
featcor <- featcor[1:ft]
trainTransformed <- trainTransformed[, names(featcor)]
testTransformed <- testTransformed[, names(featcor)]
} else if (var_count > 0){
gene_vars <- abs(apply(x[trIndx,], 2, var))
gene_vars <- sort(gene_vars, decreasing = TRUE)
gene_vars <- gene_vars[1:var_count]
trainTransformed <- trainTransformed[, names(gene_vars)]
testTransformed <- testTransformed[, names(gene_vars)]
}
train_result_sample <- train(x=trainTransformed, y=y[trIndx],
method=sprintf("%s", method),
maximize = TRUE,
tuneGrid=tgrid,
trControl=tcontrol)
train_result_sample$trainingData <- NULL
pred_sample_n <- data.frame(index = tsIndx,
pred=predict(train_result_sample, testTransformed),
obs=y[tsIndx],
resample=res)
per <- postResample(pred = pred_sample_n$pred, obs = pred_sample_n$obs)
pred_sample <- rbind(pred_sample, pred_sample_n)
metadata <- list("samples" = nrow(x), "features" = ncol(x), "label" = table(y))
modRes[[res]] <- list("model"=train_result_sample, "preprocess" = preProcValues)
output[[res]] <- list("prediction" = pred_sample, "stats" = per, "metadata" = metadata)
}
return(list("model" = modRes, "output" = output))
}
x = d5$X; y=d5$Y$aac
set.seed(1)
tgrid <- expand.grid(alpha=seq(0, 1, 0.2),
lambda=seq(0, 10, 1))
tcontrol <- trainControl(method="repeatedcv",
number= 4,
repeats = 4,
search="grid",
savePredictions ="all",
allowParallel = TRUE,
verboseIter=FALSE)
y <- y$aac
x = d5$X; y=d5$Y
y <- y$aac
trainIndex <- createDataPartition(y, p = .8,
list = TRUE,
times = 25)
pred_sample <- data.frame()
per <- list()
modRes <- list()
output <- list()
for(res in names(trainIndex))
{
}
res
trIndx <- trainIndex[[res]]
trIndx
tsIndx <- setdiff(1:nrow(x), trIndx)
tsIndx
preProcValues <- preProcess(x[trIndx, ], method = c("center", "scale"))
trainTransformed <- predict(preProcValues, x[trIndx, ])
testTransformed <- predict(preProcValues, x[tsIndx, ])
x[1:5,1:3]
trainTransformed
trainTransformed[1:3,1:4]
gene_vars <- abs(apply(x[trIndx,], 2, var))
gene_vars
gene_vars <- sort(gene_vars, decreasing = TRUE)
var_count=500
gene_vars5 <- gene_vars[1:500]
gene_vars1 <- gene_vars[1:100]
trainTransformed[1:3,1:4]
testTransformed[1:3,1:4]
names(gene_vars1)
gene_vars5 <- gene_vars[1:500]
gene_vars1 <- gene_vars[1:100]
gx <- names(gene_vars1)
trainTransformedGX <- trainTransformed[, gx]
testTransformedGX <- testTransformed[, gx]
tgrid
tcontrol
method == "glmnet"
method = "glmnet"
tgrid <- expand.grid(alpha=seq(0, 1, 0.25),
lambda=seq(0, 2, 1))
tcontrol
train_result_sample <- train(x=trainTransformedGX, y=y[trIndx],
method=sprintf("%s", method),
maximize = TRUE,
tuneGrid=tgrid,
trControl=tcontrol)
train_result_sample
train_result_sample$trainingData <- NULL
pred_sample_n <- data.frame(index = tsIndx,
pred=predict(train_result_sample, testTransformed),
obs=y[tsIndx],
resample=res)
per
pred_sample_n
per <- postResample(pred = pred_sample_n$pred, obs = pred_sample_n$obs)
per
pr <- data.frame(index = tsIndx,
pred=predict(train_result_sample, testTransformed),
obs=y[tsIndx],
resample=res)
per <- postResample(pred = pr$pred, obs = pr$obs)
per
cor(pr$pred,pr$obs)
range(y)
gx <- names(gene_vars1)
trainTransformedGX <- trainTransformed[, gx]
testTransformedGX <- testTransformed[, gx]
train_result_sample <- train(x=trainTransformedGX, y=y[trIndx],
method=sprintf("%s", method),
maximize = TRUE,
tuneGrid=tgrid,
trControl=tcontrol)
train_result_sample$trainingData <- NULL
<- data.frame(index = tsIndx,
pred=predict(train_result_sample, testTransformed),
obs=y[tsIndx],
resample=res)
pr5 <- data.frame(index = tsIndx,
pred=predict(train_result_sample, testTransformed),
obs=y[tsIndx],
resample=res)
per <- postResample(pred = pr$pred, obs = pr$obs)
cor(pr$pred,pr$obs)
cor(pr5$pred,pr5$obs)
tgrid <- expand.grid(alpha=seq(0, 1, 0.2),
lambda=seq(0, 10, 1))
gx <- names(gene_vars1)
#gx <- names(gene_vars1)
trainTransformedGX <- trainTransformed[, gx]
testTransformedGX <- testTransformed[, gx]
train_result_sample <- train(x=trainTransformedGX, y=y[trIndx],
method=sprintf("%s", method),
maximize = TRUE,
tuneGrid=tgrid,
trControl=tcontrol)
train_result_sample$trainingData <- NULL
pr <- data.frame(index = tsIndx,
pred=predict(train_result_sample, testTransformed),
obs=y[tsIndx],
resample=res)
per <- postResample(pred = pr$pred, obs = pr$obs)
cor(pr$pred,pr$obs)
train_result_sample
cor(pr$pred,pr$obs)
gx <- names(gene_vars1)
trainTransformedGX <- trainTransformed[, gx]
testTransformedGX <- testTransformed[, gx]
train_result_sample <- train(x=trainTransformedGX, y=y[trIndx],
method=sprintf("%s", method),
maximize = TRUE,
tuneGrid=tgrid,
trControl=tcontrol)
train_result_sample$trainingData <- NULL
pr5 <- data.frame(index = tsIndx,
pred=predict(train_result_sample, testTransformed),
obs=y[tsIndx],
resample=res)
cor(pr$pred,pr$obs)
cor(pr5$pred,pr5$obs)
pSet="CCLE"; problem="regression"; drugname="Bortezomib"; method="regression"
top500 <- readRDS(sprintf("../train_output/%s/%s/output/%s_%s_500.rds", pSet, problem, drugname, method))
"../train_output/%s/%s/output/%s_%s_500.rds", pSet, problem, drugname, method)
sprintf("../train_output/%s/%s/output/%s_%s_500.rds", pSet, problem, drugname, method)
top500 <- readRDS("/home/arvind/text_features/train_output/CCLE/regression/output/Bortezomib_glmnet_regression_500.rds")
top100 <- readRDS("/home/arvind/text_features/train_output/CCLE/regression/output/Bortezomib_glmnet_regression_100.rds")
"../train_output/CCLE/"
top500$Resample01
top500$Resample01$prediction
i=top500$Resample01
head(i$prediction)
p5=do.call(rbind, lapply(top500, function(i)i$prediction))
p1=do.call(rbind, lapply(top100, function(i)i$prediction))
head(p5)
head(p1)
cor(p5$pred, p5$obs)
cor(p1$pred, p1$obs)
plot(p1$pred, p1$obs)
cor(p5$pred, p5$obs, method = "s")
cor(p5$pred, p5$obs, method = "k")
c5=sapply(top500, function(i)cor(i$prediction$pred, i$prediction$obs)))
c5=sapply(top500, function(i)cor(i$prediction$pred, i$prediction$obs))
c5
c1=sapply(top100, function(i)cor(i$prediction$pred, i$prediction$obs))
c5=sapply(top500, function(i)cor(i$prediction$pred, i$prediction$obs))
c1=sapply(top100, function(i)cor(i$prediction$pred, i$prediction$obs))
c5
c1
d5 <- readRDS("../data/Bortezomib_500.rds")
#d1 <- readRDS("../data/Bortezomib_100.rds")
x = d5$X; y=d5$Y
method = "glmnet"
tgrid <- expand.grid(alpha=seq(0, 1, 0.2), lambda=seq(0, 10, 1))
library(caret)
d5 <- readRDS("../data/Bortezomib_500.rds")
#d1 <- readRDS("../data/Bortezomib_100.rds")
x = d5$X; y=d5$Y
method = "glmnet"
tgrid <- expand.grid(alpha=seq(0, 1, 0.2), lambda=seq(0, 10, 1))
tcontrol <- trainControl(method="repeatedcv",
number= 4,
repeats = 4,
search="grid",
savePredictions ="all",
allowParallel = TRUE,
verboseIter=FALSE)
x = d5$X; Y=d5$Y
method = "glmnet"
tgrid <- expand.grid(alpha=seq(0, 1, 0.2), lambda=seq(0, 10, 1))
tcontrol <- trainControl(method="repeatedcv",
number= 4,
repeats = 4,
search="grid",
savePredictions ="all",
allowParallel = TRUE,
verboseIter=FALSE)
y <- Y$aac
x = d5$X; y=d5$Y$aac
method = "glmnet"
tgrid <- expand.grid(alpha=seq(0, 1, 0.2), lambda=seq(0, 10, 1))
tcontrol <- trainControl(method="repeatedcv",
number= 4,
repeats = 4,
search="grid",
savePredictions ="all",
allowParallel = TRUE,
verboseIter=FALSE)
trainIndex <- createDataPartition(y, p = .8,
list = TRUE,
times = 25)
for(res in names(trainIndex))
{
}
trIndx <- trainIndex[[res]]
tsIndx <- setdiff(1:nrow(x), trIndx)
trIndx <- trainIndex[[res]]
tsIndx <- setdiff(1:nrow(x), trIndx)
preProcValues <- preProcess(x[trIndx, ], method = c("center", "scale"))
trainTransformed <- predict(preProcValues, x[trIndx, ])
testTransformed <- predict(preProcValues, x[tsIndx, ])
gene_vars <- abs(apply(x[trIndx,], 2, var))
gene_vars
gene_vars <- sort(gene_vars, decreasing = TRUE)
head(gene_vars)
gene_vars[1:500]
hist(gene_vars, breaks = 100)
gene_vars <- sort(gene_vars, decreasing = TRUE)
var100 <- names(gene_vars)[1:100]
var500 <- names(gene_vars)[1:500]
intersect(var100, var500)
mean(trainTransformed[,1])
sd(trainTransformed[,1])
sd(trainTransformed[,10])
sd(trainTransformed[,100])
nean(trainTransformed[,100])
mean(trainTransformed[,100])
dim(trainTransformed)
tr100 <- trainTransformed[, var100]
ts100 <- testTransformed[ , var100]
tr500 <- trainTransformed[, var500]
ts500 <- testTransformed[ , var500]
dim(tr100)
dim(tr500)
?train
model100 <- train(x=tr100, y=y[trIndx],method="glmnet", tuneGrid=tgrid,
trControl=tcontrol)
model100
model100$trainingData
model100$trainingData <- NULL
getTrainMod <- function(trData, y, trIndx, tgrid, tcontrol, tsIndx, testData,tsIndx,res)
{
model <- train(x=trData, y=y[trIndx],method="glmnet", tuneGrid=tgrid,
trControl=tcontrol)
model$trainingData <- NULL
predx <- data.frame(index = tsIndx, pred=predict(model, testData),
obs=y[tsIndx], resample=res)
return(list(model=model, pred=predx))
}
getTrainMod <- function(trData, y, trIndx, tgrid, tcontrol, tsIndx, testData,res)
{
model <- train(x=trData, y=y[trIndx],method="glmnet", tuneGrid=tgrid,
trControl=tcontrol)
model$trainingData <- NULL
predx <- data.frame(index = tsIndx, pred=predict(model, testData),
obs=y[tsIndx], resample=res)
return(list(model=model, pred=predx))
}
getTrainMod <- function(trData, y, trIndx, tgrid, tcontrol, tsIndx, testData,res)
{
model <- train(x=trData, y=y[trIndx],method="glmnet", tuneGrid=tgrid,
trControl=tcontrol)
model$trainingData <- NULL
predx <- data.frame(index = tsIndx, pred=predict(model, testData),
obs=y[tsIndx], resample=res)
return(list(model=model, pred=predx))
}
model100 <- getTrainMod(tr100, y, trIndx,tgrid, tcontrol, tsIndx, ts100, res)
model100$model
model500 <- getTrainMod(tr500, y, trIndx,tgrid, tcontrol, tsIndx, ts500, res)
performance <- postResample(pred = predx$pred, obs = predx$obs)
trData=tr100
testData=ts100
model <- train(x=trData, y=y[trIndx],method="glmnet", tuneGrid=tgrid,
trControl=tcontrol)
model$trainingData <- NULL
predx <- data.frame(index = tsIndx, pred=predict(model, testData),
obs=y[tsIndx], resample=res)
performance <- postResample(pred = predx$pred, obs = predx$obs)
performance
class(performance)
performance <- postResample(pred = predx$pred, obs = predx$obs)
performance['cor'] <- cor(predx$pred, predx$obs)
performance
getTrainMod <- function(trData, y, trIndx, tgrid, tcontrol, tsIndx, testData,res)
{
model <- train(x=trData, y=y[trIndx],method="glmnet", tuneGrid=tgrid,
trControl=tcontrol)
model$trainingData <- NULL
predx <- data.frame(index = tsIndx, pred=predict(model, testData),
obs=y[tsIndx], resample=res)
performance <- postResample(pred = predx$pred, obs = predx$obs)
performance['cor'] <- cor(predx$pred, predx$obs)
return(list(model=model, pred=predx, performance=performance))
}
model100 <- getTrainMod(tr100, y, trIndx,tgrid, tcontrol, tsIndx, ts100, res)
model500 <- getTrainMod(tr500, y, trIndx,tgrid, tcontrol, tsIndx, ts500, res)
model100$performance
model500$performance
object.size(model500)
install.packages("model100")
install.packages("gdata")
library(gdata)
gdata::as.object_sizes(model100)
gdata::object_sizes(model100)
?as.object_sizes
gdata::as.object_sizes(object.size(model100))
as.object_sizes(object.size(model100))
humanReadable(object.size(model100))
library(caret)
d5 <- readRDS("../data/Bortezomib_500.rds")
#d1 <- readRDS("../data/Bortezomib_100.rds")
x = d5$X; y=d5$Y$aac
method = "glmnet"
tgrid <- expand.grid(alpha=seq(0, 1, 0.2), lambda=seq(0, 10, 1))
tcontrol <- trainControl(method="repeatedcv",
number= 4,
repeats = 4,
search="grid",
savePredictions ="all",
allowParallel = TRUE,
verboseIter=FALSE)
trainIndex <- createDataPartition(y, p = .8, list = TRUE, times = 5)
#pred_sample <- data.frame();per <- list();modRes <- list();output <- list()
mod100List <- list(); mod500List <- list();
for(res in names(trainIndex))
{
trIndx <- trainIndex[[res]]
tsIndx <- setdiff(1:nrow(x), trIndx)
preProcValues <- preProcess(x[trIndx, ], method = c("center", "scale"))
trainTransformed <- predict(preProcValues, x[trIndx, ])
testTransformed <- predict(preProcValues, x[tsIndx, ])
gene_vars <- abs(apply(x[trIndx,], 2, var))
gene_vars <- sort(gene_vars, decreasing = TRUE)
var100 <- names(gene_vars)[1:100]
var500 <- names(gene_vars)[1:500]
tr100 <- trainTransformed[, var100]
ts100 <- testTransformed[ , var100]
tr500 <- trainTransformed[, var500]
ts500 <- testTransformed[ , var500]
##-----------
getTrainMod <- function(trData, y, trIndx, tgrid, tcontrol, tsIndx, testData,res)
{
model <- train(x=trData, y=y[trIndx],method="glmnet", tuneGrid=tgrid,
trControl=tcontrol)
model$trainingData <- NULL
predx <- data.frame(index = tsIndx, pred=predict(model, testData),
obs=y[tsIndx], resample=res)
performance <- postResample(pred = predx$pred, obs = predx$obs)
performance['cor'] <- cor(predx$pred, predx$obs)
return(list(model=model, pred=predx, performance=performance))
}
model100 <- getTrainMod(tr100, y, trIndx,tgrid, tcontrol, tsIndx, ts100, res)
model500 <- getTrainMod(tr500, y, trIndx,tgrid, tcontrol, tsIndx, ts500, res)
mod100List[[res]] <- model100
mod500List[[res]] <- model500
}
i=mod100List$Resample1$performance
sapply(mod100List, function(i)i$Resample1$performance)
i
sapply(mod100List, function(i)i$performance)
sapply(mod100List, function(i)i$performance['cor'])
sapply(mod500List, function(i)i$performance['cor'])
mean(sapply(mod100List, function(i)i$performance['cor']))
mean(sapply(mod500List, function(i)i$performance['cor']))
mean(sapply(mod100List, function(i)i$performance['cor']))
mean(sapply(mod500List, function(i)i$performance['cor']))
df=iris[1:3,]
head(df)
df=iris[,1:4]
df
head(df)
cor(df$Sepal.Length, df$Sepal.Length)
cor(df$Sepal.Length, df$Sepal.Width)
cor.test(df$Sepal.Length, df$Sepal.Width)
cor(df)
df2=df
colnames(df2)<- paste0("c",1:4)
head(df2)
cor(df, df2)
cor(df[, 1], df2[,1])
cor(df[, 2], df2[,2])
cor(df, df2[, 1:2])
head(df)
head(df2)
cor.test(df, df2[, 1:2])
cor.test(df, df2)
?upper.tri
