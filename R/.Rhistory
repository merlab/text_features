train_result_sample$trainingData <- NULL
library(caret)
library(psych)
library(PharmacoGx)
library(SummarizedExperiment)
bwplot(result [[1]]$resample$Accuracy,  xlab="Accuracy", ylab = "Erlotinib", main = "Text Mining - Accuracy by Drug")
library(tidyverse)
library(hrbrthemes)
library(viridis)
# create a dataset
data <- data.frame(
name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Basic boxplot") +
xlab("")
install.packages("hrbrthemes")
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Basic boxplot") +
xlab("")
library(hrbrthemes)
library(viridis)
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Basic boxplot") +
xlab("")
install.packages("hrbrthemes")
library(hrbrthemes)
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Basic boxplot") +
xlab("")
library(ggplot2)
library(dplyr)
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Basic boxplot") +
xlab("")
library(installr)
install.packages("installr")
library(installr)
updateR()
updateR()
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Basic boxplot") +
xlab("")
library(caret)
library(psych)
library(PharmacoGx)
library(SummarizedExperiment)
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(caret)
library(psych)
library(PharmacoGx)
library(SummarizedExperiment)
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(data.table)
source("./summarizeData.R")
source("./computeInteractionMatrix.R")
library(psych)
library(PharmacoGx)
library(SummarizedExperiment)
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(data.table)
source("./summarizeData.R")
source("./computeInteractionMatrix.R")
drugname <- "Alisertib"
pSet <- "GDSC2"
generate_df <- function(pSet, mDataType, drug){
#create df
df = summarizeData(pSet=pSet, mDataType = mDataType, drug = drug, sensitivity.measure="aac_recomputed")
df = df[, !is.na(colData(df)$aac_recomputed)]
#remove samples with NA value
NAsamples <- apply(assay(df), 2, function(i) any(is.na(i)))
df <- df[, !NAsamples]
#remove samples with no variance
gene_vars <- apply(assay(df), 1, var)
gene_vars <- sort(gene_vars, decreasing = TRUE)
gene_vars <- gene_vars[gene_vars>0]
df <- df[names(gene_vars), ]
return(df)
}
subset_by_feat <- function(df, drug, textmining, subset_size = 500, cutoff_method = "waterfall"){
minedgenes <- readRDS(sprintf("./genes/%s.rds",toupper(drug)))
#select mined genes
if (textmining == TRUE){
dfout = df[rowData(df)$gene_name %in% minedgenes$Symbol, ]
} else {
dfout= df[!(rowData(df)$gene_name %in% minedgenes$Symbol), ]
dfout = dfout[1:subset_size]
}
#produce x and y, turn y to discrete
x <- t(assay(dfout))
y <- colData(dfout)$aac_recomputed
if (cutoff_method == "waterfall"){
cutoff <- callingWaterfall(y, "AUC")
} else {
cutoff <- 0.2
}
y2 <- ifelse(y >= cutoff,"sensitive","resistant")
#print class counts for y
counts <- table(y2)
print(sprintf("Resistant: %d", counts[1]))
print(sprintf("Sensitive: %d", counts[2]))
output <- list("X"=x, "Y"=y2, "aac" = y)
return(output)
}
#second function trains model based on x and y
trainmodel <- function(x,y,name,type){
trainIndex <- createDataPartition(y, p = .8,
list = TRUE,
times = 10)
tgrid <- expand.grid(alpha=seq(0, 1, 0.2),
lambda=seq(0, 10, 1))
tcontrol <- trainControl(method="repeatedcv",
number= 4,
repeats = 4,
search="grid",
savePredictions ="all",
allowParallel = TRUE,
verboseIter=TRUE,
classProbs = TRUE)
pred_sample <- data.frame()
per <- list()
for(res in names(trainIndex))
{
trIndx <- trainIndex[[res]]
tsIndx <- setdiff(1:nrow(x), trIndx)
preProcValues <- preProcess(x[trIndx, ], method = c("center", "scale"))
trainTransformed <- predict(preProcValues, x[trIndx, ])
testTransformed <- predict(preProcValues, x[tsIndx, ])
if (type == "class"){
train_result_sample <- train(x=trainTransformed, y=y[trIndx],
method="glmnet",
maximize = TRUE,
tuneGrid=tgrid,
trControl=tcontrol)
train_result_sample$trainingData <- NULL
predictedRes  <- predict(train_result_sample, testTransformed, type = c("raw"))
predictedResProb  <- predict(train_result_sample, testTransformed, type = c("prob"))
pred_sample_n <- data.frame(index = tsIndx,
predict.class=predictedRes,
predict.prob=predictedResProb,
original=y[tsIndx],
resample=res)
per[[res]] <- confusionMatrix(data = as.factor(pred_sample_n$predict.class), reference = as.factor(pred_sample_n$original))
pred_sample <- rbind(pred_sample, pred_sample_n)
} else if (type  == "regression"){
train_result_sample <- train(x=trainTransformed, y=y[trIndx],
method="glmnet",
maximize = TRUE,
tuneGrid=tgrid,
trControl=tcontrol)
train_result_sample$trainingData <- NULL
pred_sample_n <- data.frame(index = tsIndx,
predict=predict(train_result_sample, testTransformed),
original=y[tsIndx],
resample=res)
per[[res]] <- confusionMatrix(data = as.factor(pred_sample_n$predict), reference = as.factor(pred_sample_n$original))
pred_sample <- rbind(pred_sample, pred_sample_n)
}
}
#saveRDS(train_result_sample, sprintf("model_%s.rds", name))
metadata <- list("samples" = nrow(x), "features" = ncol(x), "label" = table(y))
output <- list("prediction" = pred_sample, "stats" = per, "metadata" = metadata)
return(output)
}
df <- generate_df(GDSC2, "Kallisto_0.46.1.rnaseq", drugname)
# for text mining genes
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "fixed")
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "fixed")
result1 <- trainmodel(temp1$X, temp1$Y, drugname, "class")
saveRDS(result1, sprintf("../train_output/%s_%s_tm.rds", pSet,drugname))
# for top 500 genes
temp2 <- subset_by_feat(df, drugname, FALSE, 500,  cutoff_method = "fixed")
result2 <- trainmodel(temp2$X, temp2$Y, drugname, "class")
saveRDS(result2, sprintf("../train_output/%s_%s_500.rds", pSet,drugname))
# for top 100 genes
temp3 <- subset_by_feat(df, drugname, FALSE, 100,  cutoff_method = "fixed")
result3 <- trainmodel(temp3$X, temp3$Y, drugname, "class")
saveRDS(result3, sprintf("../train_output/%s_%s_100.rds", pSet,drugname))
# for top same number of genes
temp4 <- subset_by_feat(df, drugname, FALSE, result1$metadata$features, cutoff_method = "fixed")
result4 <- trainmodel(temp4$X, temp4$Y, drugname, "class")
saveRDS(result4, sprintf("../train_output/%s_%s_ntm.rds", pSet,drugname))
source("./train_test.R")
drugname <- "Alisertib"
pSet <- "GDSC2"
metric <- "Accuracy"
plotbw <- function(pSet, drugname, metric){
tm <- readRDS(sprintf("../train_output/%s_%s_tm.rds", pSet,drugname))
top500 <- readRDS(sprintf("../train_output/%s_%s_500.rds", pSet,drugname))
top100 <- readRDS(sprintf("../train_output/%s_%s_100.rds", pSet,drugname))
ntm <- readRDS(sprintf("../train_output/%s_%s_ntm.rds", pSet,drugname))
tm_data <- sapply(tm$stats, function(temp) temp$overall["Accuracy"])
top500_data <- sapply(top500$stats, function(temp) temp$overall["Accuracy"])
top100_data <- sapply(top100$stats, function(temp) temp$overall["Accuracy"])
ntm_data <- sapply(ntm$stats, function(temp) temp$overall["Accuracy"])
data <- data.frame(
name=c(rep("text_mining",10), rep("500_genes",10), rep("100_genes",10), rep("not_text_mining",10)),
value=c(tm_data, top500_data, top100_data, ntm_data)
)
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme(text=element_text(size=16,  family="serif")) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle(sprintf("%s - Training Results", name)) +
xlab("")
}
plotbw(pSet,drugname,metric)
plotbw <- function(pSet, drugname, metric){
tm <- readRDS(sprintf("../train_output/%s_%s_tm.rds", pSet,drugname))
top500 <- readRDS(sprintf("../train_output/%s_%s_500.rds", pSet,drugname))
top100 <- readRDS(sprintf("../train_output/%s_%s_100.rds", pSet,drugname))
ntm <- readRDS(sprintf("../train_output/%s_%s_ntm.rds", pSet,drugname))
tm_data <- sapply(tm$stats, function(temp) temp$overall["Accuracy"])
top500_data <- sapply(top500$stats, function(temp) temp$overall["Accuracy"])
top100_data <- sapply(top100$stats, function(temp) temp$overall["Accuracy"])
ntm_data <- sapply(ntm$stats, function(temp) temp$overall["Accuracy"])
data <- data.frame(
name=c(rep("text_mining",10), rep("500_genes",10), rep("100_genes",10), rep("not_text_mining",10)),
value=c(tm_data, top500_data, top100_data, ntm_data)
)
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme(text=element_text(size=16,  family="serif")) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle(sprintf("%s - Training Results", drugname)) +
xlab("")
}
plotbw(pSet,drugname,metric)
tempdir()
plotbw(pSet,drugname,metric)
plotbw(pSet,drugname,metric)
source("./train_test.R")
drugname <- "Alisertib"
pSet <- "GDSC2"
metric <- "Accuracy"
plotbw <- function(pSet, drugname, metric){
tm <- readRDS(sprintf("../train_output/%s_%s_tm.rds", pSet,drugname))
top500 <- readRDS(sprintf("../train_output/%s_%s_500.rds", pSet,drugname))
top100 <- readRDS(sprintf("../train_output/%s_%s_100.rds", pSet,drugname))
ntm <- readRDS(sprintf("../train_output/%s_%s_ntm.rds", pSet,drugname))
tm_data <- sapply(tm$stats, function(temp) temp$overall["Accuracy"])
top500_data <- sapply(top500$stats, function(temp) temp$overall["Accuracy"])
top100_data <- sapply(top100$stats, function(temp) temp$overall["Accuracy"])
ntm_data <- sapply(ntm$stats, function(temp) temp$overall["Accuracy"])
data <- data.frame(
name=c(rep("text_mining",10), rep("500_genes",10), rep("100_genes",10), rep("not_text_mining",10)),
value=c(tm_data, top500_data, top100_data, ntm_data)
)
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme(text=element_text(size=16,  family="serif")) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle(sprintf("%s - Training Results", drugname)) +
xlab("")
}
plotbw(pSet,drugname,metric)
library(caret)
library(psych)
library(PharmacoGx)
library(SummarizedExperiment)
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(data.table)
plotbw(pSet,drugname,metric)
plotbw <- function(pSet, drugname, metric){
tm <- readRDS(sprintf("../train_output/%s_%s_tm.rds", pSet,drugname))
top500 <- readRDS(sprintf("../train_output/%s_%s_500.rds", pSet,drugname))
top100 <- readRDS(sprintf("../train_output/%s_%s_100.rds", pSet,drugname))
ntm <- readRDS(sprintf("../train_output/%s_%s_ntm.rds", pSet,drugname))
tm_data <- sapply(tm$stats, function(temp) temp$overall["Accuracy"])
top500_data <- sapply(top500$stats, function(temp) temp$overall["Accuracy"])
top100_data <- sapply(top100$stats, function(temp) temp$overall["Accuracy"])
ntm_data <- sapply(ntm$stats, function(temp) temp$overall["Accuracy"])
data <- data.frame(
name=c(rep("text_mining",10), rep("500_genes",10), rep("100_genes",10), rep("not_text_mining",10)),
value=c(tm_data, top500_data, top100_data, ntm_data)
)
plt <- ggplot(data, aes(x=name, y=value, fill=name)) + geom_boxplot(alpha=0.6)
plt <- plt + theme(legend.position="none")
return(plt)
}
plot <- plotbw(pSet,drugname,metric)
print(plot)
pdf(sprintf("../results/%s_%s.pdf", pSet,drugname))
pdf(sprintf("../result/%s_%s.pdf", pSet,drugname))
print(myplot)
print(plot)
dev.off()
tm
tm <- readRDS(sprintf("../train_output/%s_%s_tm.rds", pSet,drugname))
tm$stats$Resample01$byClass
tm$stats$Resample01$byClass["Balanced Accuracy"]
plot <- plotbw(pSet,drugname,metric)
pdf(sprintf("../result/%s_%s_%s.pdf", pSet,drugname, metric))
print(plot)
dev.off()
metric <- "Balanced Accuracy"
plotbw <- function(pSet, drugname, metric){
tm <- readRDS(sprintf("../train_output/%s_%s_tm.rds", pSet,drugname))
top500 <- readRDS(sprintf("../train_output/%s_%s_500.rds", pSet,drugname))
top100 <- readRDS(sprintf("../train_output/%s_%s_100.rds", pSet,drugname))
ntm <- readRDS(sprintf("../train_output/%s_%s_ntm.rds", pSet,drugname))
if (metric == "Accuracy"){
tm_data <- sapply(tm$stats, function(temp) temp$overall["Accuracy"])
top500_data <- sapply(top500$stats, function(temp) temp$overall["Accuracy"])
top100_data <- sapply(top100$stats, function(temp) temp$overall["Accuracy"])
ntm_data <- sapply(ntm$stats, function(temp) temp$overall["Accuracy"])
}
else if (metric == "Balanced Accuracy"){
tm_data <- sapply(tm$stats, function(temp) temp$byClass["Balanced Accuracy"])
top500_data <- sapply(top500$stats, function(temp) temp$byClass["Balanced Accuracy"])
top100_data <- sapply(top100$stats, function(temp) temp$byClass["Balanced Accuracy"])
ntm_data <- sapply(ntm$stats, function(temp) temp$byClass["Balanced Accuracy"])
}
data <- data.frame(
name=c(rep("text_mining",10), rep("500_genes",10), rep("100_genes",10), rep("not_text_mining",10)),
value=c(tm_data, top500_data, top100_data, ntm_data)
)
plt <- ggplot(data, aes(x=name, y=value, fill=name)) + geom_boxplot(alpha=0.6)
plt <- plt + theme(legend.position="none")
return(plt)
}
plot <- plotbw(pSet,drugname,metric)
pdf(sprintf("../result/%s_%s_%s.pdf", pSet,drugname, metric))
print(plot)
dev.off()
print(plot)
metric
drugname <- "Erlotinib"
df <- generate_df(GDSC2, "Kallisto_0.46.1.rnaseq", drugname)
# for text mining genes
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "fixed")
# for text mining genes
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "waterfall")
drugname <- "Barasertib"
df <- generate_df(GDSC2, "Kallisto_0.46.1.rnaseq", drugname)
drugname <- "Alvocitib"
df <- generate_df(GDSC2, "Kallisto_0.46.1.rnaseq", drugname)
drugname <- "Alvocidib"
df <- generate_df(GDSC2, "Kallisto_0.46.1.rnaseq", drugname)
drugname <- "Axitinib"
df <- generate_df(GDSC2, "Kallisto_0.46.1.rnaseq", drugname)
# for text mining genes
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "waterfall")
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "waterfall")
result1 <- trainmodel(temp1$X, temp1$Y, drugname, "class")
saveRDS(result1, sprintf("../train_output/%s_%s_tm.rds", pSet,drugname))
# for top 500 genes
temp2 <- subset_by_feat(df, drugname, FALSE, 500,  cutoff_method = "fixed")
result2 <- trainmodel(temp2$X, temp2$Y, drugname, "class")
saveRDS(result2, sprintf("../train_output/%s_%s_500.rds", pSet,drugname))
# for top 100 genes
temp3 <- subset_by_feat(df, drugname, FALSE, 100,  cutoff_method = "fixed")
result3 <- trainmodel(temp3$X, temp3$Y, drugname, "class")
saveRDS(result3, sprintf("../train_output/%s_%s_100.rds", pSet,drugname))
# for top same number of genes
temp4 <- subset_by_feat(df, drugname, FALSE, result1$metadata$features, cutoff_method = "fixed")
result4 <- trainmodel(temp4$X, temp4$Y, drugname, "class")
saveRDS(result4, sprintf("../train_output/%s_%s_ntm.rds", pSet,drugname))
drugname <- "Axitinib"
plot <- plotbw(pSet,drugname,metric)
print(plot)
drugname <- "Axitinib"
plot <- plotbw(pSet,drugname,metric)
print(plot)
drugname <- "Bortezomib"
df <- generate_df(GDSC2, "Kallisto_0.46.1.rnaseq", drugname)
# for text mining genes
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "waterfall")
# for text mining genes
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "fixed")
# for text mining genes
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "fixed")
result1 <- trainmodel(temp1$X, temp1$Y, drugname, "class")
saveRDS(result1, sprintf("../train_output/%s_%s_tm.rds", pSet,drugname))
# for top 500 genes
temp2 <- subset_by_feat(df, drugname, FALSE, 500,  cutoff_method = "fixed")
result2 <- trainmodel(temp2$X, temp2$Y, drugname, "class")
saveRDS(result2, sprintf("../train_output/%s_%s_500.rds", pSet,drugname))
# for top 100 genes
temp3 <- subset_by_feat(df, drugname, FALSE, 100,  cutoff_method = "fixed")
result3 <- trainmodel(temp3$X, temp3$Y, drugname, "class")
saveRDS(result3, sprintf("../train_output/%s_%s_100.rds", pSet,drugname))
# for top same number of genes
temp4 <- subset_by_feat(df, drugname, FALSE, result1$metadata$features, cutoff_method = "fixed")
result4 <- trainmodel(temp4$X, temp4$Y, drugname, "class")
saveRDS(result4, sprintf("../train_output/%s_%s_ntm.rds", pSet,drugname))
drugname <- "Bortezomib"
plot <- plotbw(pSet,drugname,metric)
print(plot)
pdf(sprintf("../result/%s_%s_%s.pdf", pSet,drugname, metric))
print(plot)
dev.off()
metric <- "Accuracy"
plot <- plotbw(pSet,drugname,metric)
pdf(sprintf("../result/%s_%s_%s.pdf", pSet,drugname, metric))
print(plot)
dev.off()
print(plot)
drugname <- "Bosutinib"
df <- generate_df(GDSC2, "Kallisto_0.46.1.rnaseq", drugname)
drugname <- "Cabozantinib"
df <- generate_df(GDSC2, "Kallisto_0.46.1.rnaseq", drugname)
drugname <- "Canertinib"
df <- generate_df(GDSC2, "Kallisto_0.46.1.rnaseq", drugname)
drugname <- "Cediranib"
df <- generate_df(GDSC2, "Kallisto_0.46.1.rnaseq", drugname)
pred_sample <- rbind(pred_sample, pred_sample_n)
# for text mining genes
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "fixed")
# for text mining genes
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "waterfall")
# for text mining genes
temp1 <- subset_by_feat(df, drugname, TRUE, cutoff_method = "fixed")
result1 <- trainmodel(temp1$X, temp1$Y, drugname, "class")
saveRDS(result1, sprintf("../train_output/%s_%s_tm.rds", pSet,drugname))
# for top 500 genes
temp2 <- subset_by_feat(df, drugname, FALSE, 500,  cutoff_method = "fixed")
result2 <- trainmodel(temp2$X, temp2$Y, drugname, "class")
saveRDS(result2, sprintf("../train_output/%s_%s_500.rds", pSet,drugname))
# for top 100 genes
temp3 <- subset_by_feat(df, drugname, FALSE, 100,  cutoff_method = "fixed")
result3 <- trainmodel(temp3$X, temp3$Y, drugname, "class")
saveRDS(result3, sprintf("../train_output/%s_%s_100.rds", pSet,drugname))
# for top same number of genes
temp4 <- subset_by_feat(df, drugname, FALSE, result1$metadata$features, cutoff_method = "fixed")
result4 <- trainmodel(temp4$X, temp4$Y, drugname, "class")
saveRDS(result4, sprintf("../train_output/%s_%s_ntm.rds", pSet,drugname))
drugname <- "Cediranib"
plot <- plotbw(pSet,drugname,metric)
pdf(sprintf("../result/%s_%s_%s.pdf", pSet,drugname, metric))
print(plot)
dev.off()
print(plot)
metric <- "Balanced Accuracy"
plot <- plotbw(pSet,drugname,metric)
pdf(sprintf("../result/%s_%s_%s.pdf", pSet,drugname, metric))
print(plot)
dev.off()
print(plot)
getwd()
